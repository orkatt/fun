-- inspired by http://avva.livejournal.com/2994023.html-- description https://www.hackerrank.com/challenges/even-treemodule EvenTree wheredata Tree n = Nil | Leaf n | Tree n [Tree n] | Fail    deriving (Show)    link :: Tree String -> String -> String -> Tree Stringlink Nil s t =     Tree s [(Leaf t)]link (Leaf n) s t    | n == s        = Tree n [(Leaf t)]    | otherwise     = Leaf nlink (Tree n cs) s t     | n == s        = Tree n (cs ++ [Leaf t])    | otherwise     = Tree n (map f cs)        where f x = link x s treadN :: Tree String -> IO (Tree String)readN t =   do l <- getLine     if l /= ""     then readN (join t (words l))     else return t  where join x (n1:n2:_) = link x n2 n1  --class Countable t where   count :: t -> Int instance Countable (Tree n) where    count Nil         = 0   count (Leaf _)    = 1   count (Tree _ cs) = 1 + sum (map count cs)removableEdges :: Tree String -> IntremovableEdges Nil         = 0    removableEdges (Leaf _)    = 0removableEdges (Tree _ cs) = sum (map f cs)                             where f x = if even(count(x)) then 1 else 0--   main =   do t <- readN Nil     putStrLn (show t)     
